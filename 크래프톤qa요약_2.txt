# 회의 요약 결과

## 1. 요약 (문단별)
**요약:**

1. **개인 경력 및 역할 소개:**
   - 발표자는 크라프틴에서 QA 리드로 근무하며, 총 7년 이상의 QA 경력을 가지고 있습니다. 이전에는 미국 캘리포니아와 암스테르담에서 근무했으며, Naughty Dog와 Square Enix에서도 경험이 있습니다.

2. **QA 팀과의 작업:**
   - 발표자는 다양한 회사에서 QA 팀과 협력한 경험을 공유합니다. 특히 Naughty Dog와 Square Enix에서의 경험을 언급하며, 각 팀의 사진과 함께 QA 프로세스와 팀 구성을 설명합니다.

3. **워터폴드 테스팅 방식:**
   - 전통적인 워터폴드 테스팅 방식에 대해 설명하며, 이 방식이 주로 개발의 후반부에 QA 테스트가 이루어지는 것을 언급합니다. 특히, 드래곤 퀘스트 11 프로젝트에서의 경험을 통해 로컬리제이션 테스팅의 중요성을 강조합니다.

4. **Shift-Left QA 방식:**
   - 발표자는 Shift-Left QA 방식의 중요성을 강조하며, 이 방식이 어떻게 초기 개발 단계에서 QA를 통합하여 프로젝트의 품질을 개선할 수 있는지 설명합니다. Riot Games에서의 Valorant 프로젝트를 예로 들어, QA가 개발 초기부터 통합되어 프로젝트의 방향성과 품질에 긍정적인 영향을 미쳤음을 강조합니다.

5. **프로젝트 및 팀 협력:**
   - QA가 프로젝트의 다양한 단계에서 어떻게 중요한 역할을 수행하는지에 대한 구체적인 예시를 제공합니다. 특히, 개발 초기에 QA를 통합함으로써 발생할 수 있는 문제를 사전에 예방하고, 프로젝트의 전반적인 품질을 향상시킬 수 있는 방법을 논의합니다.

이 발표는 QA의 중요성과 다양한 테스팅 방식에 대한 이해를 높이고, 특히 개발 초기 단계에서 QA를 통합하는 Shift-Left 방식의 이점을 강조하는 데 중점을 두고 있습니다.

## 2. 요약 (시간대별)
**00:00:00 - 00:01:09**
- 발표자는 크래프톤에서 QA 리드로 근무 중이며, 이전에는 미국 캘리포니아에서 일했고, 현재는 암스테르담에서 근무 중입니다. 발표자는 QA 경력이 7년 이상이며, Naughty Dog와 Square Enix에서의 경험을 공유합니다.

**00:01:10 - 00:02:10**
- 발표자는 QA 팀과 관련된 슬라이드를 보여주며, 이전 팀과 현재 팀의 구성을 설명합니다. 특히 Naughty Dog와 Square Enix에서의 경험을 강조합니다.

**00:02:14 - 00:03:00**
- 발표자는 QA 팀의 역할과 중요성에 대해 설명하며, 다양한 개발팀과의 소통 방식에 대해 논의합니다. QA 팀이 개발 과정에서 어떻게 통합되고 있는지에 대한 질문을 받습니다.

**00:03:03 - 00:04:24**
- 발표자는 워터폴드 테스팅 방식에 대해 설명하며, 이 방식이 게임 개발의 후반부에 주로 적용된다고 언급합니다. 특히, 드래곤 퀘스트 11 프로젝트에서의 경험을 공유하며, 로컬리제이션 테스팅의 중요성을 강조합니다.

**00:04:30 - 00:05:34**
- 발표자는 워터폴드 테스팅이 적용되는 시기와 그 이유에 대해 논의합니다. 로컬리제이션 프로젝트에서의 테스트 중요성과 텍스트 및 글쓰기 오류 수정에 대한 경험을 공유합니다.

**00:05:40 - 00:06:26**
- 발표자는 드래곤 퀘스트 11 프로젝트에서의 엘리먼트 테스트 경험을 공유하며, 워터폴드 방식이 잘 작동하는 상황에 대해 설명합니다. 프로젝트의 개발 흐름이 예측 가능할 때 워터폴드 방식의 효과가 크다고 언급합니다.

**00:06:28 - 00:07:20**
- 발표자는 새로운 기능이나 큰 피처가 추가될 때의 대응 방법에 대해 논의합니다. QA의 역할과 중요성을 강조하며, 다양한 개발팀과의 협업을 통해 QA가 어떻게 통합되는지 설명합니다.

**00:07:48 - 00:09:39**
- 발표자는 Shift Left 방식에 대해 설명하며, 이 방식이 어떻게 QA 프로세스를 개선할 수 있는지 논의합니다. 테스팅을 프로젝트 초기 단계에서 시작하여 디자인 변경을 줄이고, 비용과 시간을 절약할 수 있는 방법을 제시합니다.

**00:09:39 - 00:10:26**
- 발표자는 Shift Left 방식의 중요성을 강조하며, QA가 개발 사이클에서 조금 일찍 진행되어야 하는 이유를 설명합니다. 이 방식이 테스팅과 디자인 결정을 조기에 검토하고 수정할 수 있게 해준다고 언급합니다.

**00:10:26 - 00:11:19**
- 발표자는 쉬프트 레프트를 적용한 경험을 공유하며, 나우디 닭(Naughty Dog)에서의 작업을 예로 들어 설명합니다. 이 방식이 어떻게 팀의 업무 효율성을 높이고, 프로젝트의 퀄리티를 유지하는 데 도움이 되었는지 공유합니다.

**00:11:19 - 00:12:58**
- 발표자는 QA 팀이 프로젝트에 어떻게 통합되고, 각 피처나 시스템팀마다 QA가 개발 초기부터 실무자와 협업을 진행하는 방식을 설명합니다. 이를 통해 개발 과정에서 발생할 수 있는 문제들을 초기에 해결할 수 있음을 강조합니다.

**00:12:58 - 00:14:00**
- 발표자는 QA 팀의 역할과 중요성을 다시 한번 강조하며, QA가 게임 개발 과정에서 어떻게 중요한 역할을 수행하는지에 대해 설명합니다. 특히, QA 팀이 게임의 다양한 레벨과 요소들에 적용되는 방식을 공유합니다.

**00:14:00 - 00:15:00**
- 발표자는 QA 팀이 게임 개발 과정에서 어떻게 협업하고, 다른 팀과 소통하는지에 대해 논의합니다. QA 팀이 게임의 전체적인 퀄리티를 유지하고, 업데이트를

## 3. 전체 전사 내용
네, 다음 슬라이드에 넘어가도록 하겠습니다. 네, 저는 현재 크라프틴에서 QA를 맡고 있습니다. 제가 이 곳에 초대받고 있는 것을 알고 있습니다. 예전에는, 다음 슬라이드에 넘어가도록 하겠습니다. 저는 또한 예전 곳에서 일했고, 전체적으로는 QA 경험이 7년 넘게 되었습니다. 현재 저는 암스터덤으로 이동하고 있습니다. 하지만 예전에는 저는 캘리포니아의 북아메리카에서 일했었습니다. 네, 지금은 크래프톤에서 QA 리드로 근무하고 있고요. 여기서 케인을 알게 되었습니다. 이전 경력은 지금 보여지는 다양한 회사들에서 일을 했었고, 전체적으로 7년 정도의 경력을 가지고 있습니다. 지금은 암스터덤에서 근무하고 있었지만, 이전 일들은 대부분 미국의 캘리포니아 주에서 근무를 했었습니다. 이것은 QA 팀의 이미지입니다. 그들을 클릭할 수 있습니다. 네, 두 팀이 있습니다. 저는 오른쪽, 왼쪽, 아래쪽으로 일했고, 다른 두 팀은 화면을 채우는 이미지입니다. 오른쪽, 왼쪽. 두 개의 이미지는 어떤 것인가요? 아래 왼쪽은 Naughty Dog의 팀이고, 오른쪽은 Square Enix의 Dragon Quest XI 팀입니다. 네, 지금 보여지는 사진들은 대부분 QA팀, 실제로 같이 일하셨던 QA팀 사진들인데, 특히 왼쪽 아래에 있는 건 노티독에 있을 때 있었던 팀이고, 오른쪽 상단에 있는 팀 같은 경우에는 Square Enix에서 일하셨을 때 있었던 팀, QA팀 사진이라고 합니다. 잠시만요, 저의 프레젠테이션을 좀 볼게요. 제가 전달한 게 뭔지 모르겠네요. 잠시만요. 네, QA팀이 어디에 들어가고, QA팀과 어떻게 소통하는지요? QA팀에 대해서는 많은 개발팀에게 질문을 드리고 싶습니다. QA팀은 회사에 따르면 매우 다릅니다. QA팀과 Naughty Dog에 대해서는 QA팀이 QA팀에 대해서는 QA팀이 QA팀에 대해서는 QA팀에 대해서는 QA팀에 대해서, auc주니까 QA팀이 맛있어요. 하지만 다른 매력에 비하면 다른 미래를 yol을 찾게 되는 것 같아요. 다양한 개발팀에게 물어보는 질문입니다. 당신의 팀에서 QA는 어떤 위치에 있는가. 회사마다 일하는 방식이 많이 다르고, 실제로 라이엇이나 노티독 등 다양한 회사에서 다양한 방법으로 근무했었던 경험이 있습니다. 지금 일하고 있는 펍지에서도 다른 방식으로 일하고 있는데, 이런 것들을 오늘 이야기해보고자 합니다. QA팀은 워터폴드 테스팅으로도 유명합니다. 여러분이 익숙한 QA팀입니다. 이 경우, 테스팅은 게임에서 꽤 늦게 시작됩니다. 다시 한번 클릭해보세요. 이 경우, 테스팅은 게임에서 이미 진행되었을 때 바로 출시될 때까지 진행됩니다. 이것은 제가 드래곤 퀘스트 11에서 처음 접한 QA입니다. 다음 슬라이드에서 보겠습니다. 이제 번역할 수 있습니다. 전통적인 워터폴드 테스트 방식으로 알려진 방식입니다. 대부분 QA 테스트 방식이라고 하면 가장 널리 알려져 있고 익숙한 방식입니다. 테스트가 대부분 개발 후반부에 이루어지게 됩니다. 테스트는 구현이 이루어지고 난 이후에 이루어지고요. 출시 전에 테스트를 하는 것이 일반적입니다. 이게 제가 드래곤 퀘스트 11에서 처음 배운 방식입니다. 네, 제가 드래곤 퀘스트 11에서 처음 배운 방식입니다. 이 게임은 일본에서 작업했기 때문입니다. 게임은 이미 완성되었고, 저는 로컬리제이션 테스팅을 했습니다. 영어로 게임을 제공했습니다. 그러나 번역과 글쓰기 에러가 많았기 때문에 제가 테스트한 것들은 대부분 텍스트에 기반입니다. 이 프로젝트에 도움이 되었습니다. 다음 슬라이드에서 더 자세히 살펴볼 수 있습니다. 클릭하셔도 됩니다. 워터폴드 테스팅이 적용될 때가 언제인가요? 워터폴드 테스팅이 적용될 때입니다. 로컬리제이션 프로젝트 같은 경우는 텍스트와 글쓰기에 집중하는 것을 이미 알고 있습니다. 그래서 테스트가 테스트 시즌의 끝으로 적용될 때가 적용되면 좋습니다. 만약 테스트가 적용되지 않은 경우, 예를 들면 QA, 프로젝트에 필요한 정보가 필요한 경우, 이건 전혀 문제없습니다. 이런 테스트는 잘못되지 않습니다. 특히 게임이 계속 바뀌는 경우 일찍 하는 것은 잘못됩니다. 그리고 일찍 하는 경우, 시간이 흔치 않습니다. 드래곤 퀘스트는 11 같은 경우 일본 지사에서 대부분의 작업이 진행되는 프로젝트였고 제가 담당했었던 일은 엘테넌트 테스트에 집중되어 있었습니다. 보통 엘테넌트 QA를 할 때는 문법이나 스펠링 오류, 이런 오류들을 수정하는 작업이었고 이런 방식의 업무에서는 워터폴드 방식이 매우 잘 작동할 수 있었습니다. 워터폴드 방식이 잘 작동하는 대표적인 상황 같은 경우에는 프로젝트의 개발 흐름이 예측될 경우입니다. 대표적으로 엘테넌트가 있었겠는데요. 문법이나 스펠링 교정 같은 경우에는 아주 간단하게 게임에 대한, 프로젝트에 대한 사전 배경 지식 없이도 충분히 수행할 수 있는 업무들이고 이런 컴플라이서나 기능성 QA가 따로 별도로 존재할 경우에 이런 방식의 업무에서는 워터폴드 방식이 매우 잘 작동합니다. 만약에 새로운 기능이나 추가적인 큰 피처가 들어오거나 예상하지 못한 작업 범위가 생겼을 때는 어떻게 하는 게 좋을까요? 질문을 먼저 던져보고 싶었습니다. 워터폴드 방식은 소프트웨어 QA의 소프트웨어 턴입니다. 소프트웨어 QA는 개발 과정에서 테스팅이나 퀄리티 확인이나 퍼포먼스 평가를 훨씬 아침에 하는 것입니다. 이는 아침에 코드를 테스트하는 것과 나중에 들어오는 범위를 줄일 수 있도록 자주 하는 것입니다. 그리고 아침에 테스팅을 하면 아침에 블록이나 위험을 확인할 수 있습니다. 그리고 아침에 테스팅을 하면 아침에 테스팅을 하면 디자인의 변화가 늦게 될 수 있습니다. 왜냐하면 워터폴드 테스팅 방식의 경우 테스팅이 프로젝트에서 매우 늦게 들어옵니다. 만약 잘못된 점이나 개발팀이 마음에 들지 않거나 플레이어가 마음에 들지 않으면 곧 너무 늦게 들어옵니다. 그리고 그건 엄청난 시간과 돈을 사용하는 것입니다. 그래서 Shift Left 방식을 사용하면 이 부분을 아침에 접근할 수 있습니다. 그리고 이 두 가지 방법은 돈을 구할 수 고요한 제품을 개발할 수 있고, 더 높은 퀄리티의 제품을 개발할 수 있습니다. QA를 레프트 테스트 방식으로 모시고 왜 중요한가에 대한 이야기인데요. 소프트웨어 QA에서 먼저 시작된 이야기입니다. QA나 퍼포먼스 검사 등을 개발 사이클에서 조금 일찍 진행하는 것인데, 테스팅을 조금 더 일찍 하면서 디자인이나 중요한 의사 결정들을 조기에 검토해볼 수 있고, 이런 것을 수정해볼 수 있습니다. 워터폴 방식의 문제는 테스팅이 너무 늦게 진행되면서 플레이어 테스트나 개발팀이 전체적인 결과물에 만족하지 못할 경우에 이미 지나치게 많은 매몰비용이 들어가서 변경하는 데 매우 큰 어려움을 겪게 되는데 쉬프트 레프트 방식을 사용하면 이런 것들을 조금 더 일찍 식별하고 큰 체인지들을 조기에, 큰 매몰비용이 들어가지 않은 상태에서 할 수 있는 장점이 있겠습니다. 다음 슬라이드입니다. 여기에 쉬프트 레프트가 무슨 뜻인지 볼 수 있습니다. 이 페이지가 번역되지 않아서 번역하실 수 있겠지만, 이 페이지는 테스팅을 나중에 진행되면서 일찍 시작하는 것입니다. 이 이미지를 제가 조금 더 부연 설명을 좀 해드릴 건데, 그 왼쪽 좌측에 Y축 같은 경우에는 퀄리티에 대한 퀄리티에 대한 확인, 그 다음에 아래쪽에 X축 좌표 같은 경우에 플랜과 디자인, 디벨롭 밀드, 테스트, 그 다음에 릴리지와 마지막에 모니터랑 분석인데, 쉬프트 레프트 모델 같은 경우가 왼쪽에 조금 더 집중되어 있고, 전통적인 워터폴 모델이 더 후반에 딥폴로인을 릴리지하는 그 단계에 집중되어 있는 것을 볼 수 있습니다. 다음 슬라이드입니다. 저는 어떤 방식으로 쉬프트 레프트를 적용했습니다? 첫 번째는 나우디 닭의 작업입니다. 다음 슬라이드입니다. 마지막 슬라이드는 익숙한 분들은 다음 슬라이드입니다. 저희 팀은 이렇게 설계되어 있습니다. QA팀이 포함되어 있었고, 그 팀에서 각 팀의 관계를 분석할 수 있었습니다. QA팀 멤버들은 각 팀의 각 장소와 각 시스템을 분석할 수 있었습니다. 이런 방식으로 QA팀은 이 게임에서 이렇게 각 장소의 이렇게 이렇게 이렇게 이렇게 이렇게 이렇게 이렇게 이렇게 각각의 POC를 만들고 POC라고 하면 담당자라고 이해해 주셔도 좋고 아니면 어떠한 그런 업무나 업무 지시가 나올 때 처음에 소통을 하는 사람이라고 생각해 주시면 좋은데 이 다양한 POC를 만들고 이 각각의 POC를 각각의 피처나 시스템별로 배정해서 작업을 진행을 했습니다 결국 각 피처팀 혹은 시스템팀마다 QA가 있고 이 QA가 개발 초기부터 실제로 실무자와 계속 협업을 진행하면서 개발하는 방식이었습니다 엘테넨 방식과는 다르게 엘테넨 같은 경우 최종 결과물이 나올 때까지는 어떻게 할 수가 없는데 이런 피처나 이런 시스템 같은 경우는 초기 개발 디자인 초기부터 함께 할 수 있어서 함께 할 수 있는 방식이었습니다 다음 슬라이드 네 그래서 엠베드드 포인트 컨택이 어떤 의미인지 기본적으로 각 지역의 전체 퀄리티를 유지하는 것입니다 이런 의미는 게임에 대한 업데이트도 하고 팀의 나머지 업데이트를 공유하고 다른 방식의 업데이트를 하는 것입니다 일반적으로는 다른 팀이 게임의 다른 레벨에 적용되고 무기를 옷을 이런 것들을 적용하는 것입니다 퀄리티 포인트 컨택은 매일 디자이너, 아티스트, 프로그래머들에게 작업을 특별히 테스트하는 것을 알려드립니다 업데이트가 게임에 적용되기 전까지 모든 변화가 보입니다 퀄리티 포인트 컨택은 팀의 나머지 업데이트를 공유하고 다른 방식의 업데이트를 하는 것입니다 타 부서와 같이 협업을 하게 되는데 실제 예시로 예를 들어 전투나 무기 혹은 옷 같은 것들을 담당하는 QA라면 매일 디자이너랑 아티스트랑 프로그래머들과 소통을 하고 앞으로 어떤 게 만들어질지 어떻게 개발이 될 것인지 이런 전체적인 이야기를 매일 나누게 됩니다 그럼 실제로 이것이 구현되어 들어오기 전에 그 피처에 대해서 배경 지식을 지속적으로 쌓아 나가게 됩니다 그럼 테스트 전에 충분한 배경 지식을 가지게 되고 이 배경 지식을 가지고 실제 테스트도 진행하는 물론이고 이 피처가 어떻게 개발되고 있는지 이런 것들을 QA팀 그리고 나아가 타팀과 지속적으로 소통하게 되는 게 이 방식의 핵심이라고 할 수 있겠습니다 다음 슬라이드 감사합니다 네 그리고 QA가 할 수 있는 다른 도움이 되었을 것입니다 그 도움이 개발 지원을 할 수 있었습니다 일반적으로 테스트하는 밖의 이런 작업들은 보통 NavMesh를 도와주는 것과 게임에 아이템을 놓고 플레이어들이 어려워로 고를 수 있는 아이템을 뽑는 것과 수직을 타기 위해 수직을 훔쳐내는 것만으로도 가능합니다 QA는 수직을 훔쳐 낸다 또는 이미지를 통과할 수 있도록 수직을 훔쳐내는 것입니다 저희는 디자인 작업을 하면서 게임의 시설도 설정하고 QA는 플레이어들이 볼 수 있는 지역에 박스를 놓고 그 박스를 오픈하고 메인 캐릭터가 돌아다니는 경우에 옵티마이징 작업을 도와줬습니다 그래서 저희는 버그도 고치고 QA에서 플레이어들에게 도움을 주었고 게임 업계의 다른 목표가 있었습니다 QA는 저희에게 앞으로의 직업에 집중할 수 있게 도와주었고 QA는 저희에게 앞으로의 팀의 직업에 집중할 수 있게 도와주었고 QA는 저희에게 앞으로의 직업에 집중할 수 있게 도와주었고 QA는 저희에게 앞으로의 직업에 집중할 수 있게 QA가 내부 메시를 깔았고 내부 메시가 정상적으로 깔렸는지 확인도 같이 하게 되고 간단한 아이템 같은 것들 전투에 필요한 아이템들을 깐다든가 표면 태깅 대표적으로 철조망 같은 게 있는데요 철조망이 사격에 관통이 되는지 확인도 하고 사격이 관통이 되어야 한다면 사격 관통 태그를 붙이기도 하고 사격만 관통이 되어야 할지 AI가 실제로 그것을 통과해서 유저를 발견할 수 있어야 하는지 지형 지물에 각각의 태그를 붙이는 작업도 QA가 같이 진행을 했습니다 그래서 실제로 노티도그에서는 QA가 버글 수정을 직접 할 기회도 많았고요 QA가 지금은 QA를 하고 있지만 혹시나 게임 업계의 다른 분야로 전향하고자 하는 사람들에게 이런 기회를 통해서 다른 업종으로 전향할 수 있는 기회도 노티도그에서는 많이 제공을 했었습니다 그리고 레벨에 대한 전체적인 컨텍스트를 QA가 계속 이해하고 있었기 때문에 게임의 완성도를 높이는데 QA가 직접적으로 관여할 수 있는 기여할 수 있는 기회가 많았습니다 개발에서 얻었던 핵심 경험은 개발이 끝난 뒤에도 많은 테스트를 진행하긴 했지만 개발 초기부터 초기 단계에서부터 많은 다양한 테스트를 진행하고 엔진에 직접 작업을 할 수 있는 기회가 제공이 되면서 게임의 퀄리티를 많이 향상시킬 수 있었습니다 보통 많은 회사들이 QA들에게 엔진에 대한 직접적인 액세스 권한이나 이런 것들을 주지 않는데 노티도그에서는 이런 기회를 제공함으로써 최종 결과물의 완성도를 크게 높일 수 있었습니다 그래서 이것이 노티도그의 경험이었습니다 이제 저는 Valorant에서 Riot에서 일하고 있는 경험에 대해 이야기할 것입니다 다음 슬라이드 QA를 매우 아쉽게 알 수 없었습니다 저는 Valorant에서 QA 엔지니어로 프로그레션과 스킨 팀과 콘텐츠 인테리어 팀에 작업했습니다 보통은 프로듀서, 엔지니어들, 아티스트가 QA 엔지니어로 외관 테스트를 관리하기도 했습니다 QA는 외관 테스트를 관리하는 것입니다 이전까지는 노티도그에서 일했었던 경험이고 지금부터는 Riot의 Valorant 팀에서 일했었던 경험을 공유하고자 합니다 비슷한 방식인데 QA를 초기에 배치하는 방식 중에서 Riot에서는 Pod라는 방 형태로 나눠서 운영을 했습니다 각 Pod은 각각 엔지니어, 아티스트 QA 리드 혹은 QA 품질 책임자, 프로듀서로 구성되어 있는데 각 Pod은 각각의 시스템 혹은 어떤 목표를 가지고 작업을 하게 됩니다 여기서 QA 엔지니어가 하는 것은 QA 엔지니어 한 명이 그 외부의 QA 테스터나 QA 회사 외주를 관리하는 방식으로 일을 했었습니다 그래서 내부에 많은 QA를 가지고 있기보다는 내부의 QA를 각 핵심 Pod에 배치하고 그 Pod에 있는 QA가 필요하다면 외부 QA를 데리고 와서 함께 테스트하는 방식으로 진행했습니다 QA 엔지니어 혹은 퀄리티 리드의 책임이 조금 더 들어갔습니다 이것은 프로듀서와 엔지니어팀의 목표로 진행되었습니다 여러분이 Valorant을 플레이하시면 아시다시피 저희가 2주에 한 번씩 개발하는 꽤 좋은 패치 시스템을 제공하고 6주에 한 번씩 더 많은 시즌 업데이트를 개발했습니다 변화가 있는지 모르겠지만 저희는 이 모든 작업을 1년이나 더 늦춰야 했습니다 저희는 특정 스킨이나 새로운 배틀 패스를 그리고 시즌 콘텐츠를 적용해야 했습니다 저희 프로듀서와의 스프린트 계획에 매우 극단적이었고 다른 팀과 협력해야 했죠 작업이 함께 진행되었다면 마지막으로 제가 작업한 것은 이건 스킨의 전투기입니다 전에는 새로운 기술이 있었지만 스킨 팀은 실제 기술 디자이너팀과 협력해야했고 저희는 새로운 스킨을 개발하고 배틀 패스의 파트인 새로운 기술을 적용해야 했죠 저희는 개발이 너무 늦었기 때문에 일찍 개발해야 했죠 그렇게 되면 저희는 스킨이나 새로운 배틀 패스를 늦춰야 했고 또는 스킨이나 새로운 배틀 패스를 생략해야 했죠 저희는 새로운 스킨을 개발하고 새로운 배틀 패스를 생략해야 했고 또한 새로운 스킨을 개발하고 새로운 배틀 패스를 생략해야 했죠 저희는 새로운 스킨을 개발하고 새로운 배틀 패스를 생략해야 했죠 또한 새로운 스킨을 개발하고 새로운 배틀 패스를 생략해야 했죠 또한 새로운 스킨을 개발하고 새로운 배틀 패스를 생략해야 했죠 저희는 새로운 스킨을 개발하고 새로운 배틀 패스를 생략해야 했죠 새로운 배틀 패스를 개발하고 새로운 배틀 패스를 생략해야 했죠 항상 가볍게 레벨업을 할 땐 새로운 배틀 패스를 생략할 거예요 새로 오는 스킨이나 새로운 배틀 패스를 생략해야 할지 이런 것들을 조기에 빠르게 결정하는데 책임이 있었습니다 새로운 배틀 패스를 생략해야 할지 새로운 배틀 패스를 생략해야 할지 정의의 시스템이 바뀌어야 할지 정의의 시스템을 사용해야 했죠 스킨과 프로그레션을 작업했지만 새로운 배틀 패스를 생략할 때 스킨과 프로그레션을 작업했을 때 새로운 배틀 패스를 생략해야 했죠 이 모든 것들을 생각해야 했죠 코드를 적용하기 전까지 왜냐하면 위험성이 있다면 위험성을 높여야 했죠 아니면 개발이 너무 늦었을 때 개발이 늦었을 때 늦었을 때 늦었을 때 늦었을 때 늦었을 때 마인드맵핑에 대해서 이야기를 할 건데요 마인드맵핑은 QA리드가 주관한 업무 루틴 중에서 마지막에 나왔던 마인드맵핑입니다 마인드맵핑은 여기 나와 있는 것처럼 모호한 기능이나 새로운 시스템 같은 것들을 구체적인 결과물로 전환해서 하는 협업 과정인데 마인드맵에서 특히 라이브팀에서 이런 일들을 진행하는데 많은 리스크가 따르는데요 이런 리스크를 최소화하기 위해서 마인드맵핑이라고 이해하시면 좋겠습니다 대표적으로 발로란트에서 새로운 에이전트, 캐릭터죠 새로운 캐릭터나 새로운 총기들을 추가한다면 여기 나와 있는 최소한 이 정도는 무조건 고려를 해야 합니다 대표적으로 밸런스를 따져서 본다면 새로운 캐릭터, 새로운 에이전트의 기술이나 이런 것들이 게임의 메타나 게임의 레벨 디자인과 어떻게 상호작용이 하게 될지 고려를 해야 하고 제가 실제로 담당한 업무는 스킨과 프로그레션에 관련해서 업무를 진행했지만 마찬가지로 새로운 에이전트가 추가됐을 때 해당 에이전트의 프로그레션, 그에 따른 스킨이 어떻게 변환경 되는지 이런 것들을 엔지니어링팀이 실제로 코드 작업을 하기 전에 이런 것들을 마인드맵핑을 통해서 도출하고 만약에 문제가 있다고 한다면 그런 것들을 사전에 문제 제기를 해서 실제로 프로그래밍 작업이 들어가서 지나치게 많은 매몰비용이 들어가고 난 뒤에 이슈레이징을 하는 것이 아니라 이런 마인드맵핑을 통해서 약이 될 수 있는 잠재적 문제들을 사전에 찾아내고 그런 것들을 사전에 이슈레이징을 함으로써 매몰비용을 최소화할 수 있습니다. 고맙습니다. 네, 그리고 이 프레젠테이션을 마치면서 제가 예전의 경험에서 얻어낸 정보들을 소개해드리겠습니다. 쉬플렉트는 모든 게임에 도움이 되지 않습니다. 그러나 QA팀이 일찍 시작되거나 엔지니어링팀이 엔지니어링팀에 도움을 주거나 엔지니어링팀이 엔지니어링팀에 도움을 주거나 다른 디자인팀과 마인드맵핑을 통해 엔지니어링팀이 게임의 위험성을 조정할 수 있습니다. 그리고 이는 게임 개발팀이 QA팀이 게임 개발팀이 게임 개발팀이 게임 개발팀이 게임 개발팀이 게임 개발팀이 QA팀이 QA팀이 QA팀이 QA팀이 QA팀이 QA팀이 역할의 역할의 역할의 역할의 역할의 역할의 역할의 역할의 역할의 역할의 역할의 역할의 QA역할의 QA역할의 QA역할의 다 upward 다 upward 다 upward 마빠 마빠 마빠 마빠 마빠 아주 이� Jin 그건 Shift-Left 기법에서 여러 요소 중에 작은 요소들을 노출해서 그런 것들을 한번 실천을 해보면 상당히 많은 것들을 할 수 있고 많은 비용을 절감할 수 있습니다 대표적으로 Shift-Left에서 실제로 도전해보기 쉬운 것들은 QA를 초기에 개발 초기에 팀에 포함시키고 엔진에 대한 직접적인 권한을 부여하는 것인데 많은 개발팀들이 게임도 없는데 QA가 무슨 테스트를 한다고 개발 초기에 필요한가요? 라는 질문을 할 수 있겠지만 실제로 QA를 초기에 배치를 함으로써 마인드맵핑 같은 프로덕션 관련된 업무도 할 수 있고 초기에 개발을 하면서 개발자들이 사용하기 위한 툴도 개발이 되는데 그런 툴에 대한 QA도 같이 진행할 수 있고 이런 것들을 통해서 QA가 비단 버그를 찾아내는 사람이 아니라 버그가 발생하는 걸 미연에 차단하는 역할을 수행할 수 있게 됩니다. 그래서 버그를 생성, 만들어진 버그를 찾아내는 것보다 버그를 발생시키지 않는다면 중장기적으로 더 많은 인력과 자금을 아낄 수 있는 방법이라고 생각합니다. 네, 들어주셔서 감사드립니다. 질문이 많으신 것 같아요. 그런 질문에 시간을 보낼 수 있습니다. 저는 1시간 정도 시간을 보낼 수 있어서 질문이 많이 오셨는데 그런 질문을 받을 수 있도록 진행해보겠습니다. 네, 가능합니다.